// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Prompter is an autogenerated mock type for the Prompter type
type Prompter struct {
	mock.Mock
}

// Input provides a mock function with given fields: label
func (_m *Prompter) Input(label string) (string, error) {
	ret := _m.Called(label)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(label)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MultiSelect provides a mock function with given fields: label, options
func (_m *Prompter) MultiSelect(label string, options []string) ([]int, error) {
	ret := _m.Called(label, options)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, []string) []int); ok {
		r0 = rf(label, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(label, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: label, options
func (_m *Prompter) Select(label string, options []string) (int, error) {
	ret := _m.Called(label, options)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, []string) int); ok {
		r0 = rf(label, options)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(label, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
