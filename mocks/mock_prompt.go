// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LucaCtt/thelist/util (interfaces: Prompt)

// Package mocks is a generated GoMock package.
package mocks

import (
	data "github.com/LucaCtt/thelist/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// PromptShow mocks base method
func (m *MockPrompt) PromptShow() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptShow")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptShow indicates an expected call of PromptShow
func (mr *MockPromptMockRecorder) PromptShow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptShow", reflect.TypeOf((*MockPrompt)(nil).PromptShow))
}

// SelectShow mocks base method
func (m *MockPrompt) SelectShow(arg0 *data.ShowList) (*data.Show, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectShow", arg0)
	ret0, _ := ret[0].(*data.Show)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectShow indicates an expected call of SelectShow
func (mr *MockPromptMockRecorder) SelectShow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectShow", reflect.TypeOf((*MockPrompt)(nil).SelectShow), arg0)
}
